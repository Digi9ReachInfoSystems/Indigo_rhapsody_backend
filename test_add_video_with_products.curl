# Test Add Video With Products Endpoint
# This endpoint allows creating videos with associated products

# Base URL - Update this to match your server URL
BASE_URL="http://localhost:3000"

echo "üß™ Testing Add Video With Products Endpoint"
echo "==========================================="
echo ""

# Test 1: Create video with designerId (valid data)
echo "‚úÖ Test 1: Create video with designerId (valid data)"
echo "---------------------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "designerId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video.mp4",
    "title": "Fashion Showcase Video",
    "description": "A beautiful showcase of sustainable fashion products",
    "productIds": ["507f1f77bcf86cd799439013", "507f1f77bcf86cd799439014"],
    "isApproved": false
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 2: Create video with creatorId (valid data)
echo "‚úÖ Test 2: Create video with creatorId (valid data)"
echo "--------------------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video2.mp4",
    "title": "Creator Introduction Video",
    "description": "Introduction to our content creator"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 3: Create video with both creatorId and designerId
echo "‚úÖ Test 3: Create video with both creatorId and designerId"
echo "--------------------------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439012",
    "designerId": "507f1f77bcf86cd799439013",
    "videoUrl": "https://example.com/video3.mp4",
    "title": "Collaboration Video",
    "description": "Video created by creator featuring designer products",
    "productIds": ["507f1f77bcf86cd799439014"]
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 4: Missing both creatorId and designerId
echo "‚úÖ Test 4: Missing both creatorId and designerId"
echo "------------------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "videoUrl": "https://example.com/video4.mp4",
    "title": "Video without creator/designer"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 5: Missing required fields (title)
echo "‚úÖ Test 5: Missing required fields (title)"
echo "------------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video5.mp4",
    "description": "Video without title"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 6: Invalid userId format
echo "‚úÖ Test 6: Invalid userId format"
echo "-------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "invalid-user-id",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video6.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 7: Invalid creatorId format
echo "‚úÖ Test 7: Invalid creatorId format"
echo "----------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "invalid-creator-id",
    "videoUrl": "https://example.com/video7.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 8: Invalid designerId format
echo "‚úÖ Test 8: Invalid designerId format"
echo "-----------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "designerId": "invalid-designer-id",
    "videoUrl": "https://example.com/video8.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 9: Invalid video URL
echo "‚úÖ Test 9: Invalid video URL"
echo "---------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "ftp://example.com/video9.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 10: Invalid product ID format
echo "‚úÖ Test 10: Invalid product ID format"
echo "------------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video10.mp4",
    "title": "Test Video",
    "productIds": ["invalid-product-id", "507f1f77bcf86cd799439013"]
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 11: Non-existent user
echo "‚úÖ Test 11: Non-existent user"
echo "----------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439999",
    "creatorId": "507f1f77bcf86cd799439012",
    "videoUrl": "https://example.com/video11.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 12: Non-existent creator
echo "‚úÖ Test 12: Non-existent creator"
echo "-------------------------------"
curl -X POST "${BASE_URL}/api/content-videos/add-video-with-products" \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "507f1f77bcf86cd799439011",
    "creatorId": "507f1f77bcf86cd799439999",
    "videoUrl": "https://example.com/video12.mp4",
    "title": "Test Video"
  }' \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

echo "üéØ Test Summary:"
echo "================"
echo "‚úÖ Test 1: Should create video with designerId successfully"
echo "‚úÖ Test 2: Should create video with creatorId successfully"
echo "‚úÖ Test 3: Should create video with both creatorId and designerId"
echo "‚úÖ Test 4: Should return error for missing both creatorId and designerId"
echo "‚úÖ Test 5: Should return error for missing required fields (title)"
echo "‚úÖ Test 6: Should return error for invalid userId format"
echo "‚úÖ Test 7: Should return error for invalid creatorId format"
echo "‚úÖ Test 8: Should return error for invalid designerId format"
echo "‚úÖ Test 9: Should return error for invalid video URL"
echo "‚úÖ Test 10: Should return error for invalid product ID format"
echo "‚úÖ Test 11: Should return error for non-existent user"
echo "‚úÖ Test 12: Should return error for non-existent creator"
echo ""
echo "üìù Endpoint Details:"
echo "==================="
echo "‚Ä¢ POST /api/content-videos/add-video-with-products - Create video with products"
echo ""
echo "üìä Request Body Parameters:"
echo "=========================="
echo "‚Ä¢ userId (required): Valid MongoDB ObjectId of the user"
echo "‚Ä¢ creatorId (optional): Valid MongoDB ObjectId of the creator"
echo "‚Ä¢ designerId (optional): Valid MongoDB ObjectId of the designer"
echo "‚Ä¢ videoUrl (required): Valid HTTP/HTTPS URL"
echo "‚Ä¢ title (required): Video title"
echo "‚Ä¢ description (optional): Video description"
echo "‚Ä¢ productIds (optional): Array of valid MongoDB ObjectIds"
echo "‚Ä¢ isApproved (optional): Boolean, defaults to false"
echo ""
echo "‚ö†Ô∏è  Note: Either creatorId OR designerId (or both) must be provided"
echo ""
echo "üìä Response Structure (Success):"
echo "==============================="
echo "‚Ä¢ success: Boolean indicating success"
echo "‚Ä¢ message: Response message"
echo "‚Ä¢ video._id: Video ID"
echo "‚Ä¢ video.title: Video title"
echo "‚Ä¢ video.description: Video description"
echo "‚Ä¢ video.videoUrl: Video URL"
echo "‚Ä¢ video.is_approved: Approval status"
echo "‚Ä¢ video.createdDate: Creation timestamp"
echo "‚Ä¢ video.userId: User information"
echo "‚Ä¢ video.creatorId: Creator information (final creatorId used)"
echo "‚Ä¢ video.designerId: Designer ID if provided, null otherwise"
echo "‚Ä¢ video.products: Array of associated products"
echo "‚Ä¢ video.totalProducts: Number of products"
echo ""
echo "üîí Validation Rules:"
echo "==================="
echo "‚Ä¢ userId must be a valid MongoDB ObjectId"
echo "‚Ä¢ Either creatorId OR designerId (or both) must be provided"
echo "‚Ä¢ creatorId must be a valid MongoDB ObjectId (if provided)"
echo "‚Ä¢ designerId must be a valid MongoDB ObjectId (if provided)"
echo "‚Ä¢ videoUrl must be a valid HTTP/HTTPS URL"
echo "‚Ä¢ title is required and cannot be empty"
echo "‚Ä¢ All productIds must be valid MongoDB ObjectIds"
echo "‚Ä¢ User must exist in database"
echo "‚Ä¢ Creator must exist in database (if provided)"
echo "‚Ä¢ Designer must exist in database (if provided)"
echo "‚Ä¢ All products must exist in database"
echo ""
echo "üí° Usage Examples:"
echo "=================="
echo "‚Ä¢ With designerId: Include designerId parameter"
echo "‚Ä¢ With creatorId: Include creatorId parameter"
echo "‚Ä¢ With both: Include both creatorId and designerId"
echo "‚Ä¢ With products: Include productIds array"
echo "‚Ä¢ Pre-approved: Set isApproved to true"
echo ""
echo "üìã Sample Request Bodies:"
echo "========================"
echo ""
echo "With designerId:"
echo '{
  "userId": "507f1f77bcf86cd799439011",
  "designerId": "507f1f77bcf86cd799439012",
  "videoUrl": "https://example.com/video.mp4",
  "title": "Fashion Showcase Video",
  "description": "A beautiful showcase of sustainable fashion products",
  "productIds": ["507f1f77bcf86cd799439013", "507f1f77bcf86cd799439014"],
  "isApproved": false
}'
echo ""
echo "With creatorId:"
echo '{
  "userId": "507f1f77bcf86cd799439011",
  "creatorId": "507f1f77bcf86cd799439012",
  "videoUrl": "https://example.com/video.mp4",
  "title": "Creator Content Video",
  "description": "Content created by a user",
  "productIds": ["507f1f77bcf86cd799439013"],
  "isApproved": false
}'
echo ""
echo "With both creatorId and designerId:"
echo '{
  "userId": "507f1f77bcf86cd799439011",
  "creatorId": "507f1f77bcf86cd799439012",
  "designerId": "507f1f77bcf86cd799439013",
  "videoUrl": "https://example.com/video.mp4",
  "title": "Collaboration Video",
  "description": "Video created by creator featuring designer products",
  "productIds": ["507f1f77bcf86cd799439014"],
  "isApproved": false
}'
echo ""
echo "üìã Sample Response (Success):"
echo "============================="
echo '{
  "success": true,
  "message": "Video with products created successfully",
  "video": {
    "_id": "507f1f77bcf86cd799439015",
    "title": "Fashion Showcase Video",
    "description": "A beautiful showcase of sustainable fashion products",
    "videoUrl": "https://example.com/video.mp4",
    "is_approved": false,
    "createdDate": "2024-01-15T10:30:00.000Z",
    "no_of_likes": 0,
    "no_of_dislikes": 0,
    "no_of_Shares": 0,
    "userId": {
      "_id": "507f1f77bcf86cd799439011",
      "displayName": "John Doe",
      "email": "john@example.com"
    },
    "creatorId": {
      "_id": "507f1f77bcf86cd799439012",
      "displayName": "Fashion Designer",
      "shortDescription": "Sustainable fashion designer"
    },
    "designerId": "507f1f77bcf86cd799439012",
    "products": [
      {
        "productId": {
          "_id": "507f1f77bcf86cd799439013",
          "productName": "Eco-Friendly Dress",
          "price": 1500,
          "sku": "EFD001"
        },
        "addedAt": "2024-01-15T10:30:00.000Z"
      }
    ],
    "totalProducts": 1
  }
}'

# Test Bulk Product Update Endpoint
# This endpoint allows bulk updating products via CSV file upload

# Base URL - Update this to match your server URL
BASE_URL="http://localhost:3000"

# Admin token - Replace with your actual admin token
ADMIN_TOKEN="your_admin_jwt_token_here"

echo "üß™ Testing Bulk Product Update Endpoint"
echo "======================================"
echo ""

# Test 1: Upload CSV file for bulk update
echo "‚úÖ Test 1: Upload CSV file for bulk update"
echo "------------------------------------------"
echo "Note: You need to create a CSV file with the following headers:"
echo "Product ID SKU, Product Name, Category, Sub Category, Designer, Designer Price, MRP, Discount %, Fit, Fabric, Material, Status, In Stock, Returnable, Trending, Description, Total Stock"
echo ""

# Example curl command (you'll need to create the CSV file first)
curl -X POST "${BASE_URL}/api/products/bulk-update" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -F "csvFile=@products_bulk_update.csv" \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 2: Test without file
echo "‚úÖ Test 2: Test without file upload"
echo "----------------------------------"
curl -X POST "${BASE_URL}/api/products/bulk-update" \
  -H "Authorization: Bearer ${ADMIN_TOKEN}" \
  -H "Content-Type: application/json" \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 3: Test without authentication
echo "‚úÖ Test 3: Test without authentication"
echo "------------------------------------"
curl -X POST "${BASE_URL}/api/products/bulk-update" \
  -H "Content-Type: application/json" \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

# Test 4: Test with invalid token
echo "‚úÖ Test 4: Test with invalid token"
echo "--------------------------------"
curl -X POST "${BASE_URL}/api/products/bulk-update" \
  -H "Authorization: Bearer invalid_token" \
  -H "Content-Type: application/json" \
  -w "\n\nHTTP Status: %{http_code}\nResponse Time: %{time_total}s\n" \
  -s
echo ""

echo "üéØ Test Summary:"
echo "================"
echo "‚úÖ Test 1: Should upload CSV and update products (requires valid CSV file)"
echo "‚úÖ Test 2: Should return error for missing file"
echo "‚úÖ Test 3: Should return unauthorized error"
echo "‚úÖ Test 4: Should return invalid token error"
echo ""
echo "üìù CSV File Requirements:"
echo "========================"
echo "‚Ä¢ Required column: 'Product ID SKU' (for matching products)"
echo "‚Ä¢ Supported formats: .csv, .xlsx, .xls"
echo "‚Ä¢ Maximum file size: 10MB"
echo "‚Ä¢ File field name: 'csvFile'"
echo ""
echo "üìä Supported CSV Columns:"
echo "========================"
echo "‚Ä¢ Product ID SKU (required) - Matches product.sku field"
echo "‚Ä¢ Product Name - Updates product.productName"
echo "‚Ä¢ Category - Updates product.category (searches by name)"
echo "‚Ä¢ Sub Category - Updates product.subCategory (searches by name)"
echo "‚Ä¢ Designer - Updates product.designerRef (searches by displayName)"
echo "‚Ä¢ Designer Price - Updates product.price"
echo "‚Ä¢ MRP - Updates product.mrp"
echo "‚Ä¢ Discount % - Updates product.discount"
echo "‚Ä¢ Fit - Updates product.fit"
echo "‚Ä¢ Fabric - Updates product.fabric"
echo "‚Ä¢ Material - Updates product.material"
echo "‚Ä¢ Status - Updates product.enabled (true/false, enabled/disabled)"
echo "‚Ä¢ In Stock - Updates product.in_stock (true/false, yes/no)"
echo "‚Ä¢ Returnable - Updates product.returnable (true/false, yes/no)"
echo "‚Ä¢ Trending - Updates product.isTrending (true/false, yes/no)"
echo "‚Ä¢ Description - Updates product.description"
echo "‚Ä¢ Total Stock - Updates product.stock"
echo ""
echo "üìä Response Structure:"
echo "====================="
echo "‚Ä¢ success: Boolean indicating success"
echo "‚Ä¢ message: Response message"
echo "‚Ä¢ data.total: Total number of rows processed"
echo "‚Ä¢ data.updated: Number of products successfully updated"
echo "‚Ä¢ data.notFound: Number of products not found"
echo "‚Ä¢ data.errors: Array of error details with row numbers"
echo "‚Ä¢ data.success: Array of successful updates with details"
echo ""
echo "üí° Usage Examples:"
echo "=================="
echo "‚Ä¢ Basic upload: curl -X POST /api/products/bulk-update -H 'Authorization: Bearer TOKEN' -F 'csvFile=@file.csv'"
echo "‚Ä¢ With progress: Use multipart/form-data with 'csvFile' field"
echo ""
echo "üîß CSV File Creation Tips:"
echo "========================="
echo "1. Use Excel or Google Sheets to create your CSV"
echo "2. Ensure 'Product ID SKU' column matches existing product SKUs"
echo "3. Use consistent boolean values (true/false, yes/no, enabled/disabled)"
echo "4. For categories/designers, use exact names as in database"
echo "5. Save as CSV format (.csv extension)"
echo ""
echo "üìã Sample CSV Content:"
echo "====================="
echo "Product ID SKU,Product Name,Category,Sub Category,Designer,Designer Price,MRP,Discount %,Fit,Fabric,Material,Status,In Stock,Returnable,Trending,Description,Total Stock"
echo "SKU001,Classic Cotton Shirt,Clothing,Shirts,Indigo Amour,1500,2000,25,Regular,Cotton,Cotton,enabled,true,true,false,Comfortable cotton shirt,50"
echo "SKU002,Denim Jacket,Clothing,Jackets,DIORAMA DESIGNS,2500,3000,17,Regular,Denim,Denim,enabled,true,true,true,Stylish denim jacket,30"
